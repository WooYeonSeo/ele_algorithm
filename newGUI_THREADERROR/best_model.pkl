ccopy_reg
_reconstructor
p1
(clogistic_sgd
LogisticRegression
p2
c__builtin__
object
p3
NtRp4
(dp5
S'b'
g1
(ctheano.tensor.sharedvar
TensorSharedVariable
p6
g3
NtRp7
(dp8
S'auto_name'
p9
S'auto_57'
p10
sS'index'
p11
NsS'tag'
p12
(itheano.gof.utils
scratchpad
p13
(dp14
S'trace'
p15
(lp16
(S'C:\\Users\\DS\\Downloads\\WinPython-64bit-2.7.10.2\\python-2.7.10.amd64\\lib\\site-packages\\theano\\compile\\sharedvalue.py'
p17
I209
S'shared'
p18
S'utils.add_tag_trace(var)'
tp19
asbsS'container'
p20
g1
(ctheano.gof.link
Container
p21
g3
NtRp22
(dp23
S'name'
p24
S'b'
sS'storage'
p25
(lp26
cnumpy.core.multiarray
_reconstruct
p27
(cnumpy
ndarray
p28
(I0
tS'b'
tRp29
(I1
(L17L
tcnumpy
dtype
p30
(S'f4'
I0
I1
tRp31
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S"\xe7\x0cI\xbf\xe7\x0cI\xbf\x03tH\xbf\xb8\xb1!?\xd4\xae\xc7=\\\xa3i>\xac\x02K>\xb9\xd9d>o\xdf\x89>\xdfo@>\x93\x08\xe0=\x1d\xc6\xf8=\x91Z.>'\x98\x02>\xcb\x88;<\xd2\xe0\x08>\xa1\t \xbe"
tbasS'strict'
p32
I00
sS'readonly'
p33
I00
sS'type'
p34
g1
(ctheano.tensor.type
TensorType
p35
g3
NtRp36
(dp37
S'broadcastable'
p38
(I00
tp39
sS'dtype'
p40
S'float32'
p41
sS'numpy_dtype'
p42
g31
sS'sparse_grad'
p43
I00
sg24
NsbsS'allow_downcast'
p44
Nsbsg24
S'b'
sS'owner'
p45
Nsg34
g36
sbsS'y_pred'
p46
g1
(ctheano.tensor.var
TensorVariable
p47
g3
NtRp48
(dp49
g9
S'auto_67'
p50
sg11
I1
sg12
(itheano.gof.utils
scratchpad
p51
(dp52
g15
(lp53
(S'C:\\Users\\DS\\Downloads\\WinPython-64bit-2.7.10.2\\python-2.7.10.amd64\\lib\\site-packages\\theano\\gof\\type.py'
p54
I318
S'__call__'
p55
S'return utils.add_tag_trace(self.make_variable(name))'
tp56
asbsg24
S'argmax'
p57
sg45
g1
(ctheano.gof.graph
Apply
p58
g3
NtRp59
(dp60
S'inputs'
p61
(lp62
g1
(g47
g3
NtRp63
(dp64
g9
S'auto_64'
p65
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p66
(dp67
g15
(lp68
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp69
asbsg24
Nsg45
g1
(g58
g3
NtRp70
(dp71
g61
(lp72
g1
(g47
g3
NtRp73
(dp74
g9
S'auto_63'
p75
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p76
(dp77
g15
(lp78
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp79
asbsg24
Nsg45
g1
(g58
g3
NtRp80
(dp81
g61
(lp82
g1
(g47
g3
NtRp83
(dp84
g9
S'auto_58'
p85
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p86
(dp87
g15
(lp88
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp89
asbsg24
Nsg45
g1
(g58
g3
NtRp90
(dp91
g61
(lp92
g1
(g47
g3
NtRp93
(dp94
g9
S'auto_54'
p95
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p96
(dp97
g15
(lp98
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp99
asbsg24
Nsg45
g1
(g58
g3
NtRp100
(dp101
g61
(lp102
g1
(g47
g3
NtRp103
(dp104
g9
S'auto_51'
p105
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p106
(dp107
g15
(lp108
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp109
asbsg24
Nsg45
g1
(g58
g3
NtRp110
(dp111
g61
(lp112
g1
(g47
g3
NtRp113
(dp114
g9
S'auto_46'
p115
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p116
(dp117
g15
(lp118
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp119
asbsg24
Nsg45
g1
(g58
g3
NtRp120
(dp121
g61
(lp122
g1
(g47
g3
NtRp123
(dp124
g9
S'auto_42'
p125
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p126
(dp127
g15
(lp128
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp129
asbsg24
Nsg45
g1
(g58
g3
NtRp130
(dp131
g61
(lp132
g1
(g47
g3
NtRp133
(dp134
g9
S'auto_39'
p135
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p136
(dp137
g15
(lp138
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp139
asbsg24
Nsg45
g1
(g58
g3
NtRp140
(dp141
g61
(lp142
g1
(g47
g3
NtRp143
(dp144
g9
S'auto_34'
p145
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p146
(dp147
g15
(lp148
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp149
asbsg24
Nsg45
g1
(g58
g3
NtRp150
(dp151
g61
(lp152
g1
(g47
g3
NtRp153
(dp154
g9
S'auto_30'
p155
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p156
(dp157
g15
(lp158
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp159
asbsg24
Nsg45
g1
(g58
g3
NtRp160
(dp161
g61
(lp162
g1
(g47
g3
NtRp163
(dp164
g9
S'auto_27'
p165
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p166
(dp167
g15
(lp168
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp169
asbsg24
Nsg45
g1
(g58
g3
NtRp170
(dp171
g61
(lp172
g1
(g47
g3
NtRp173
(dp174
g9
S'auto_22'
p175
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p176
(dp177
g15
(lp178
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp179
asbsg24
Nsg45
g1
(g58
g3
NtRp180
(dp181
g61
(lp182
g1
(g47
g3
NtRp183
(dp184
g9
S'auto_18'
p185
sg11
Nsg12
(itheano.gof.utils
scratchpad
p186
(dp187
g15
(lp188
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp189
asbsg24
S'x'
sg45
Nsg34
g1
(g35
g3
NtRp190
(dp191
g38
(I00
I00
tp192
sg40
S'float32'
p193
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g6
g3
NtRp194
(dp195
g9
S'auto_20'
p196
sg11
Nsg12
(itheano.gof.utils
scratchpad
p197
(dp198
g15
(lp199
(g17
I209
g18
S'utils.add_tag_trace(var)'
tp200
asbsg20
g1
(g21
g3
NtRp201
(dp202
g24
S'W'
sg25
(lp203
g27
(g28
(I0
tS'b'
tRp204
(I1
(L7L
L7L
tg31
I00
S']p\xb1K>\x83\xfd\xbf]p\xb1K]p\xb1K\xaa\x84\xc7\xbf]p\xb1Km\xb6\xe4\xbf\xf5\xd1$E\xdef]\xc0\xf7\xc2$E\xf6\xd5$E,\xe7\x1a\xc0\xe0\xb5$E\xcfN\x98\xbe\xa4\x18>D\xdd\xc6\xdc\xbe#\xe5=D\xc3m=D\xdaqt\xbe\x0f\xe1=D>\x8f\t\xc0\xc4?\x93\xbfX?\x8f?\x0cJ\xed\xbf\x9e.\xc5\xbf\x8f\x91;?\xb3[\xe2\xbf#*\xb3\xbf\xe1})@\xdfL\x9a>\xd8\x9d\xc5?\xe3\x14\x18\xc0\x84h\xfa\xbfF\xab\xdb\xbf\x80\xde\x16\xc0\x8d/\x06?\xc2\x9d$?2\x12\x01\xbf\x02\xa4\xb9\xbf,\xbe\xdc\xbe\x85\xe6\x93\xbfn\x0e\x9a\xbf\xfd\xbb/F\r)\x1d\xbf\xc8\xc4/F\xdd\xb3/F\xb4\x9e\xc2\xbft\xb6/F\x8f\x18\xd2\xbf'
tbasg32
I00
sg33
I00
sg34
g1
(g35
g3
NtRp205
(dp206
g38
(I00
I00
tp207
sg40
S'float32'
p208
sg42
g31
sg43
I00
sg24
Nsbsg44
Nsbsg24
S'W'
sg45
Nsg34
g205
sbasg12
(itheano.gof.utils
scratchpad
p209
(dp210
bsS'outputs'
p211
(lp212
g173
asS'op'
p213
g1
(ctheano.tensor.basic
Dot
p214
g3
NtRp215
(dp216
S'_op_use_c_code'
p217
S'g++'
p218
sbsbsg34
g1
(g35
g3
NtRp219
(dp220
g38
(I00
I00
tp221
sg40
S'float32'
p222
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g47
g3
NtRp223
(dp224
g9
S'auto_26'
p225
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p226
(dp227
bsg24
Nsg45
g1
(g58
g3
NtRp228
(dp229
g61
(lp230
g1
(g6
g3
NtRp231
(dp232
g9
S'auto_21'
p233
sg11
Nsg12
(itheano.gof.utils
scratchpad
p234
(dp235
g15
(lp236
(g17
I209
g18
S'utils.add_tag_trace(var)'
tp237
asbsg20
g1
(g21
g3
NtRp238
(dp239
g24
S'b'
sg25
(lp240
g27
(g28
(I0
tS'b'
tRp241
(I1
(L7L
tg31
I00
S'\xcc\x98o9\xed\x8f\xcd\xbfR\xc1^:\xf0\xe8\xd1;~\x90\xc1\xbf\x17W\x8c;\xfa\xff\xa8\xbf'
tbasg32
I00
sg33
I00
sg34
g1
(g35
g3
NtRp242
(dp243
g38
(I00
tp244
sg40
S'float32'
p245
sg42
g31
sg43
I00
sg24
Nsbsg44
Nsbsg24
S'b'
sg45
Nsg34
g242
sbasg12
(itheano.gof.utils
scratchpad
p246
(dp247
bsg211
(lp248
g223
asg213
g1
(ctheano.tensor.elemwise
DimShuffle
p249
g3
NtRp250
(dp251
S'drop'
p252
(lp253
sS'shuffle'
p254
(lp255
I0
asS'augment'
p256
(lp257
I0
asS'input_broadcastable'
p258
g244
sS'inplace'
p259
I00
sS'new_order'
p260
(S'x'
I0
tp261
sg217
g218
sbsbsg34
g1
(g35
g3
NtRp262
(dp263
g38
(I01
I00
tp264
sg40
g245
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p265
(dp266
bsg211
(lp267
g163
asg213
g1
(ctheano.tensor.elemwise
Elemwise
p268
g3
NtRp269
(dp270
S'__module__'
p271
S'tensor'
p272
sS'scalar_op'
p273
g1
(ctheano.scalar.basic
Add
p274
g3
NtRp275
(dp276
S'output_types_preference'
p277
ctheano.scalar.basic
upcast_out
p278
sg217
g218
sg24
S'add'
p279
sbsg24
S'Elemwise{add,no_inplace}'
p280
sS'destroy_map'
p281
(dp282
sS'nfunc_spec'
p283
(g279
I2
I1
tp284
sS'inplace_pattern'
p285
(dp286
sS'openmp'
p287
I00
sg217
g218
sS'__doc__'
p288
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p289
sbsbsg34
g1
(g35
g3
NtRp290
(dp291
g38
(I00
I00
tp292
sg40
S'float32'
p293
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p294
(dp295
bsg211
(lp296
g153
asg213
g1
(g268
g3
NtRp297
(dp298
g24
S'sigmoid'
p299
sg273
g1
(ctheano.tensor.nnet.sigm
ScalarSigmoid
p300
g3
NtRp301
(dp302
g277
ctheano.scalar.basic
upgrade_to_float
p303
sg217
g218
sg24
S'scalar_sigmoid'
p304
sbsg281
(dp305
sg283
Nsg285
(dp306
sg287
I00
sg217
g218
sbsbsg34
g1
(g35
g3
NtRp307
(dp308
g38
(I00
I00
tp309
sg40
g293
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g6
g3
NtRp310
(dp311
g9
S'auto_32'
p312
sg11
Nsg12
(itheano.gof.utils
scratchpad
p313
(dp314
g15
(lp315
(g17
I209
g18
S'utils.add_tag_trace(var)'
tp316
asbsg20
g1
(g21
g3
NtRp317
(dp318
g24
S'W'
sg25
(lp319
g27
(g28
(I0
tS'b'
tRp320
(I1
(L7L
L7L
tg31
I00
S'9\xcb5@\xd1:\x0b\xbf\x8f\x1cH@\t8\x01?\xe9\xb3/\xbf\x83\x18*\xc0X\x9fP\xbf\xba\xd6Y\xbf\xf2f\xce?\xd0v:\xc0&R\xfe\xbf\x1d!\xa0\xbf\x0fv\xc7?Z;\xa4\xbfHq\xf1?\xef\xa4\xf8\xbf\x02+_?$\x12k@ii\xeb\xbf\x9a\xf7\xae\xbe\xb9\x80\xa5\xbf\xda\xe4[?\xb1\xfc\r\xc0\xe7\xb3A@\xba\xfbW@YN\x05\xbfj\x81\xab\xbf\x00\x956\xbe\xf6>\x12\xc0\n!\xa1?\x95\xe7G\xc0p\xd6\x89\xbf\xb9\x83\xf7?k\xee\xbd\xbf@\x17I\xbfO\xdfm@8( ?,@\xbc?\xcb\xc4\x1f?\x87\xd8f\xbf\x0c\x0eq\xbdL0<>\xd2@7\xc0\xb9\xb66?\xb03%\xc0\x1d\xf5)\xc0\xec\x17\xf7?R1\x8b\xbf?\xcd\xa5?'
tbasg32
I00
sg33
I00
sg34
g1
(g35
g3
NtRp321
(dp322
g38
(I00
I00
tp323
sg40
S'float32'
p324
sg42
g31
sg43
I00
sg24
Nsbsg44
Nsbsg24
S'W'
sg45
Nsg34
g321
sbasg12
(itheano.gof.utils
scratchpad
p325
(dp326
bsg211
(lp327
g143
asg213
g215
sbsg34
g1
(g35
g3
NtRp328
(dp329
g38
(I00
I00
tp330
sg40
S'float32'
p331
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g47
g3
NtRp332
(dp333
g9
S'auto_38'
p334
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p335
(dp336
bsg24
Nsg45
g1
(g58
g3
NtRp337
(dp338
g61
(lp339
g1
(g6
g3
NtRp340
(dp341
g9
S'auto_33'
p342
sg11
Nsg12
(itheano.gof.utils
scratchpad
p343
(dp344
g15
(lp345
(g17
I209
g18
S'utils.add_tag_trace(var)'
tp346
asbsg20
g1
(g21
g3
NtRp347
(dp348
g24
S'b'
sg25
(lp349
g27
(g28
(I0
tS'b'
tRp350
(I1
(L7L
tg31
I00
S'\x03\xdc\x0e>\xea\x90\t\xbfm\x87\x84>\x85\xf3g>%\xda\xda\xbe#\xdb\xc2\xbe\x8d\xe2\x93\xbe'
tbasg32
I00
sg33
I00
sg34
g1
(g35
g3
NtRp351
(dp352
g38
(I00
tp353
sg40
S'float32'
p354
sg42
g31
sg43
I00
sg24
Nsbsg44
Nsbsg24
S'b'
sg45
Nsg34
g351
sbasg12
(itheano.gof.utils
scratchpad
p355
(dp356
bsg211
(lp357
g332
asg213
g1
(g249
g3
NtRp358
(dp359
g252
(lp360
sg254
(lp361
I0
asg256
(lp362
I0
asg258
g353
sg259
I00
sg260
(S'x'
I0
tp363
sg217
g218
sbsbsg34
g1
(g35
g3
NtRp364
(dp365
g38
(I01
I00
tp366
sg40
g354
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p367
(dp368
bsg211
(lp369
g133
asg213
g269
sbsg34
g1
(g35
g3
NtRp370
(dp371
g38
(I00
I00
tp372
sg40
g293
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p373
(dp374
bsg211
(lp375
g123
asg213
g297
sbsg34
g1
(g35
g3
NtRp376
(dp377
g38
(I00
I00
tp378
sg40
g293
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g6
g3
NtRp379
(dp380
g9
S'auto_44'
p381
sg11
Nsg12
(itheano.gof.utils
scratchpad
p382
(dp383
g15
(lp384
(g17
I209
g18
S'utils.add_tag_trace(var)'
tp385
asbsg20
g1
(g21
g3
NtRp386
(dp387
g24
S'W'
sg25
(lp388
g27
(g28
(I0
tS'b'
tRp389
(I1
(L7L
L7L
tg31
I00
S'XX\x9b?d\xb2\xb9?\x18\xbf:\xc0v\x1e\x00@\xc3\x19\r\xc0EvP@\xdf\xc4}?%\x88\t\xc0\x18\x9f@\xbf\xecB\x94?\xfc\x13Y\xbf<\xdb\xd7>\xd7\xcbB>\x89\xe0\x12>\x18\xca\xc9?#\x7f\xf9\xbf\x82\xdaN\xbf\xf8O\xf9?\xc2\xfa\r\xbfR\x13V?\xbc\xc2[@)\xe9)@sV9\xbf\xc5\x9c\xeb\xbef\xe7\xd3?\xd3;\xf4\xbf\xf0]U?\xd0i\xe8?]" \xbe\x05c0\xbel\xb1o\xbf\xd5.$\xbf\xc1\x96\x9f?\x18Z\r\xc0\xb2\x83\x1d?\x8f-\x84\xbfY\xa3\x00?\xdc\x8f\x0f\xc0\xc7\x0b\x1f\xc06\x17\xd5?1\xfb\xbb?\x10\xfa\x05\xc0c\x0c\xb1\xbf\x81\xd9"\xbcz\xf6\x82\xbf`N\xa6\xbfmg\x08\xc0\xae\x91\xe8;3\xec4>'
tbasg32
I00
sg33
I00
sg34
g1
(g35
g3
NtRp390
(dp391
g38
(I00
I00
tp392
sg40
S'float32'
p393
sg42
g31
sg43
I00
sg24
Nsbsg44
Nsbsg24
S'W'
sg45
Nsg34
g390
sbasg12
(itheano.gof.utils
scratchpad
p394
(dp395
bsg211
(lp396
g113
asg213
g215
sbsg34
g1
(g35
g3
NtRp397
(dp398
g38
(I00
I00
tp399
sg40
S'float32'
p400
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g47
g3
NtRp401
(dp402
g9
S'auto_50'
p403
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p404
(dp405
bsg24
Nsg45
g1
(g58
g3
NtRp406
(dp407
g61
(lp408
g1
(g6
g3
NtRp409
(dp410
g9
S'auto_45'
p411
sg11
Nsg12
(itheano.gof.utils
scratchpad
p412
(dp413
g15
(lp414
(g17
I209
g18
S'utils.add_tag_trace(var)'
tp415
asbsg20
g1
(g21
g3
NtRp416
(dp417
g24
S'b'
sg25
(lp418
g27
(g28
(I0
tS'b'
tRp419
(I1
(L7L
tg31
I00
S'b\x8d\x95?\xf5\x17\x15\xbfL\xbdK\xbf!\x99\x80?\x03\xa5\x93\xbf!/K?\xf7\x01p>'
tbasg32
I00
sg33
I00
sg34
g1
(g35
g3
NtRp420
(dp421
g38
(I00
tp422
sg40
S'float32'
p423
sg42
g31
sg43
I00
sg24
Nsbsg44
Nsbsg24
S'b'
sg45
Nsg34
g420
sbasg12
(itheano.gof.utils
scratchpad
p424
(dp425
bsg211
(lp426
g401
asg213
g1
(g249
g3
NtRp427
(dp428
g252
(lp429
sg254
(lp430
I0
asg256
(lp431
I0
asg258
g422
sg259
I00
sg260
(S'x'
I0
tp432
sg217
g218
sbsbsg34
g1
(g35
g3
NtRp433
(dp434
g38
(I01
I00
tp435
sg40
g423
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p436
(dp437
bsg211
(lp438
g103
asg213
g269
sbsg34
g1
(g35
g3
NtRp439
(dp440
g38
(I00
I00
tp441
sg40
g293
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p442
(dp443
bsg211
(lp444
g93
asg213
g297
sbsg34
g1
(g35
g3
NtRp445
(dp446
g38
(I00
I00
tp447
sg40
g293
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g6
g3
NtRp448
(dp449
g9
S'auto_56'
p450
sg11
Nsg12
(itheano.gof.utils
scratchpad
p451
(dp452
g15
(lp453
(g17
I209
g18
S'utils.add_tag_trace(var)'
tp454
asbsg20
g1
(g21
g3
NtRp455
(dp456
g24
S'W'
sg25
(lp457
g27
(g28
(I0
tS'b'
tRp458
(I1
(L7L
L17L
tg31
I00
S"\x14\xbeH\xbf\x14\xbeH\xbfq%H\xbf1r!?\xfb_\xc7=pGi>\x02\xb3J>t\x80d>\xad\xa9\x89>K%@>\x1d\xb2\xdf=Fd\xf8=\n\x16.>\x19e\x02>\x04H;<\xdc\xaa\x08>\xae\xcb\x1f\xbe\xf8\xb1\x05\xbe\xf8\xb1\x05\xbeis\x05\xbeW\x9e\xce=\x1a\x0bt<\xfa\x96\x15=\xc2{\x07=\xff\xc1\x1c=\xa9\xe4>=3p\x0b=Op\xb1<R\x8a\x9f<zE\xe4<\xf0>\xba<\x91\xeb\x8e;\x80I\xae<\x9e\x9a\xf7\xbc!0\x9e\xbb!0\x9e\xbb\xf8\xb7\x9d\xbbWg~;\xea\x0f\x1d:D\xcc\xb7:6\xbb\x9f:\x0b\x16\xb4:p\xfe\xd8:Jx\x97:\xc0h0:\xb5\xb8C:\xa3,\x89:\x89\x8fM:xM\x948\xe6XW:]\xff{\xba\xf4\xbdH\xbf\xf4\xbdH\xbfI%H\xbf\x00r!?\xde_\xc7=;Gi>\xdc\xb2J>\x19\x80d>\x9c\xa9\x89>\xf5$@>/\xb2\xdf=Jd\xf8=\x08\x16.>'e\x02>{G;<\xd3\xaa\x08>\xc6\xcb\x1f\xbe\x7f\xd3\x03\xbb\x7f\xd3\x03\xbbHo\x03\xbb\x98\x02\xd4:\xf3\xe2\x829\xda*\x19:\x95\x1c\x05:\xf6\x12\x16:\xba\xd44:\xb2t\xfc9O\x03\x939;\x1a\xa39V\xa0\xe49\xd5M\xab9\xef0\xf77;u\xb39k\x01\xd2\xb9\xb3gH\xbf\xb3gH\xbfb\xcfG\xbf(,!?W\x08\xc7=\xef\xe1h>\xde[J>\xf8\x1ed>&o\x89>\xf5\xd4?>\x93W\xdf=\xc4\xf8\xf7=\x07\xcb->W.\x02>\xbb\x15;<9o\x08>\x1e\x8a\x1f\xbe?\xbfH\xbf?\xbfH\xbf\x89&H\xbfCs!?\x14a\xc7=\xbbHi>P\xb4J>\xa4\x81d>}\xaa\x89>=&@>\x94\xb3\xdf=\x97e\xf8=-\x17.>\xfbe\x02>\x8fH;<\xbb\xab\x08>\x93\xcc\x1f\xbe"
tbasg32
I00
sg33
I00
sg34
g1
(g35
g3
NtRp459
(dp460
g38
(I00
I00
tp461
sg40
S'float32'
p462
sg42
g31
sg43
I00
sg24
Nsbsg44
Nsbsg24
S'W'
sg45
Nsg34
g459
sbasg12
(itheano.gof.utils
scratchpad
p463
(dp464
bsg211
(lp465
g83
asg213
g215
sbsg34
g1
(g35
g3
NtRp466
(dp467
g38
(I00
I00
tp468
sg40
S'float32'
p469
sg42
g31
sg43
I00
sg24
Nsbsbag1
(g47
g3
NtRp470
(dp471
g9
S'auto_62'
p472
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p473
(dp474
bsg24
Nsg45
g1
(g58
g3
NtRp475
(dp476
g61
(lp477
g7
asg12
(itheano.gof.utils
scratchpad
p478
(dp479
bsg211
(lp480
g470
asg213
g1
(g249
g3
NtRp481
(dp482
g252
(lp483
sg254
(lp484
I0
asg256
(lp485
I0
asg258
g39
sg259
I00
sg260
(S'x'
I0
tp486
sg217
g218
sbsbsg34
g1
(g35
g3
NtRp487
(dp488
g38
(I01
I00
tp489
sg40
g41
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p490
(dp491
bsg211
(lp492
g73
asg213
g269
sbsg34
g1
(g35
g3
NtRp493
(dp494
g38
(I00
I00
tp495
sg40
g293
sg42
g31
sg43
I00
sg24
Nsbsbasg12
(itheano.gof.utils
scratchpad
p496
(dp497
bsg211
(lp498
g63
asg213
g1
(ctheano.tensor.nnet.nnet
Softmax
p499
g3
NtRp500
(dp501
g217
g218
sbsbsg34
g493
sbag1
(ctheano.tensor.var
TensorConstant
p502
g3
NtRp503
(dp504
g9
S'auto_65'
p505
sg11
Nsg12
(itheano.gof.utils
scratchpad
p506
(dp507
S'unique_value'
p508
Nsbsg24
NsS'cached'
p509
I01
sg34
g1
(g35
g3
NtRp510
(dp511
g38
(tsg40
S'int8'
p512
sg42
g30
(S'i1'
I0
I1
tRp513
(I3
S'|'
NNNI-1
I-1
I0
tbsg43
I00
sg24
NsbsS'data'
p514
g27
(g28
(I0
tS'b'
tRp515
(I1
(tg513
I00
S'\x01'
tbsbasg12
(itheano.gof.utils
scratchpad
p516
(dp517
bsg211
(lp518
g1
(g47
g3
NtRp519
(dp520
g9
S'auto_66'
p521
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p522
(dp523
g15
(lp524
(g54
I318
g55
S'return utils.add_tag_trace(self.make_variable(name))'
tp525
asbsg24
S'max'
p526
sg45
g59
sg34
g1
(g35
g3
NtRp527
(dp528
g38
(I00
tp529
sg40
g293
sg42
g31
sg43
I00
sg24
Nsbsbag48
asg213
g1
(ctheano.tensor.basic
MaxAndArgmax
p530
g3
NtRp531
(dp532
g217
g218
sbsbsg34
g1
(g35
g3
NtRp533
(dp534
g38
(I00
tp535
sg40
S'int64'
p536
sg42
g30
(S'i8'
I0
I1
tRp537
(I3
S'<'
NNNI-1
I-1
I0
tbsg43
I00
sg24
NsbsbsS'params'
p538
(lp539
g448
ag7
asS'W'
g448
sS'input'
p540
g93
sS'p_y_given_x'
p541
g63
sb.